{
  "compilerOptions": {
    // XXX: There is the following dependency chain in the type declarations:
    //
    // `vitest/globals` <- `vitest` <- `vite` <- `@types/node` <- `es2020`
    //
    // `@types/node` has this `<reference lib="es2020" />`:
    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/562ab89f5b7b6ec777941f9578b7c81eff10c5af/types/node/index.d.ts#L28C5-L28C31
    //
    // This `<reference>` makes our `lib` declaration of the ES standard library
    // version *almost* entirely useless. We still implicitly get `es2020` from
    // `node`'s types, so IDE may suggest you some features from the node's
    // version of supported ES standard.
    //
    // Unfortunately there seems to be no way to configure separate tsconfig
    // just for application files in the IDE to make sure IDE suggests only the
    // features of maximum ECMA standard version that we support. However, as a
    // workaround we have a separate `tsconfig.build.json` that we use for our
    // final builds and on CI. That `tsconfig` doesn't include `vitest`, and
    // consequently any of its transitive `@types/node`, `es2020` dependencies.
    // This way we still have a check that we don't depend on ES features higher
    // than our support target.
    "lib": ["ES2019", "DOM", "DOM.Iterable"],
    "target": "ES2019",
    "types": ["vitest/globals"],

    "baseUrl": "./js",
    "useDefineForClassFields": true,
    "esModuleInterop": true,
    "allowJs": true,
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "strict": true,

    // Checks that aren't enabled by `strict` and not covered by `eslint`:
    "noImplicitOverride": true

    // TODO: this is a really useful check, but our existing code has been
    // written with so much unsafe indexing that needs some work to improve
    // before this can be enabled
    // "noUncheckedIndexedAccess": true
  },
  "include": ["./js/**/*", "./types/**/*", "./test/**/*"]
}
